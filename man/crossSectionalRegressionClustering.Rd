% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cross-sectional-regression-clustering.R
\name{crossSectionalRegressionClustering}
\alias{crossSectionalRegressionClustering}
\title{Cross-Sectional Regression with Clustering}
\usage{
crossSectionalRegressionClustering(
  returns,
  volume,
  start,
  end,
  h,
  nr_pc,
  k,
  min_size,
  alpha
)
}
\arguments{
\item{returns}{A numeric matrix, the returns data.}

\item{volume}{A numeric matrix, the volume data.}

\item{start}{An integer, the start of the day range for which to perform regression.}

\item{end}{An integer, the end of the day range for which to perform regression.}

\item{h}{An integer, the number of recent historical days to be used.}

\item{nr_pc}{An integer, the number of principal components to extract in eigen portfolios.}

\item{k}{An integer, the desired number of clusters.}

\item{min_size}{An integer, the minimum desired size of the clusters.}

\item{alpha}{A numeric, the weight given to the correlation matrix in the combined similarity matrix used for clustering.}
}
\value{
A list with two elements:
        - A numeric matrix of normalized predictions where each row corresponds to a day in the given `start:end` range and each column corresponds to a stock.
        - The final number of clusters.
}
\description{
This function performs cross-sectional regression on a range of days to predict returns, considering the effect of volume. 
Correlation-based distance is computed on the basis of returns and volume, and clustering is performed on this distance.
For each cluster, on each day in the range, a linear model is fit between the returns of the previous day and the eigen portfolios. 
The normalized negative residuals from these models are returned as predicted returns. The function is parallelized for increased speed.
}
\examples{
#Example data
returns <- matrix(rnorm(25), 5, 5)
volume <- matrix(rnorm(25), 5, 5)
start <- 1
end <- 4
h <- 2
nr_pc <- 2
k <- 2
min_size <- 1
alpha <- 0.5
#Use the function
crossSectionalRegressionClustering(returns, volume, start, end, h, nr_pc, k, min_size, alpha)

}
